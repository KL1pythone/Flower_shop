import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AmoCRM
AMOCRM_SUBDOMAIN = 'cvetoot'
AMOCRM_ACCESS_TOKEN = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjM5NDllYzBjZmYzM2JhYjE3MDQ4NGQxYTRjYWM3YmMwNWQwZGU1NWFmY2E1MmYwMjIxZTZlYTNkNzlmODRjNTBlZGMzNzIwNTVmMDk0MGYyIn0.eyJhdWQiOiI3YWNiYzgwNS1kNTIxLTQ4ZmEtODgzYS1kYTkzOWIxN2ZmN2MiLCJqdGkiOiIzOTQ5ZWMwY2ZmMzNiYWIxNzA0ODRkMWE0Y2FjN2JjMDVkMGRlNTVhZmNhNTJmMDIyMWU2ZWEzZDc5Zjg0YzUwZWRjMzcyMDU1ZjA5NDBmMiIsImlhdCI6MTc0MTAwODcyMCwibmJmIjoxNzQxMDA4NzIwLCJleHAiOjE4NjcxOTA0MDAsInN1YiI6Ijg1MDM0MTQiLCJncmFudF90eXBlIjoiIiwiYWNjb3VudF9pZCI6MzAzNjU2NzcsImJhc2VfZG9tYWluIjoiYW1vY3JtLnJ1IiwidmVyc2lvbiI6Miwic2NvcGVzIjpbImNybSIsImZpbGVzIiwiZmlsZXNfZGVsZXRlIiwibm90aWZpY2F0aW9ucyIsInB1c2hfbm90aWZpY2F0aW9ucyJdLCJoYXNoX3V1aWQiOiI0NWFlNDhkZS0xY2RjLTQzMDktYTNjOS1mY2E5NmNjNGFjODgiLCJhcGlfZG9tYWluIjoiYXBpLWIuYW1vY3JtLnJ1In0.RJJXQuLJzL7FT-U16FiOdhE-FsLJ2GCv6QxU8YaeuVaLjAr4wXkBeejgN4HgPXubN3PMVcN7D4U83po4lldLmi6_v6sj_2UnvYSOmmE8JJC6vF7oqXYq1q__la2E2v2ImVTlhfWW-shppE-J0CN3lGJlj0HFRNEPeYCJy1Oyb_Zs7IaVhaaCSBdDzGafPUhIdYiofDramgnBgribgIAmPZJEWyzCFxX58dCoNFH5dWn5oVDwM-UhIBjpt4Zx1UAuU7orQxZ15cZloSKKwfvA7lYLOsjfbXcdpdbIABjlji9z-QR1CY7EAqk5sb1z0lZmUfWlzWyvk6FPYgcFhq072w'
AMOCRM_BASE_URL = f'https://{AMOCRM_SUBDOMAIN}.amocrm.ru/api/v4'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Posiflora
POSIFLORA_API_URL = 'https://cvetoot.posiflora.com/api/v1'
POSIFLORA_CREDENTIALS = {
    "username": "cvetoot",
    "password": "wowtDCx7"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
amocrm_headers = {
    'Authorization': f'Bearer {AMOCRM_ACCESS_TOKEN}',
    'Content-Type': 'application/json'
}

def create_contact(name, phone, bonus_points):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ AmoCRM —Å –±–æ–Ω—É—Å–∞–º–∏"""
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {name}")
    contact_data = {
        "name": name,
        "custom_fields_values": [
            {
                "field_id": 568643,
                "values": [{"value": phone, "enum_id": 381257}]
            },
            {
                "field_id": 1421111,
                "values": [{"value": str(bonus_points) if bonus_points else '0'}]
            }
        ]
    }

    try:
        response = requests.post(
            f'{AMOCRM_BASE_URL}/contacts',
            headers=amocrm_headers,
            json=[contact_data]
        )
        response.raise_for_status()
        return response.json()['_embedded']['contacts'][0]['id']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")
        return None

def create_lead(name, budget, contact_id, purchase_date):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM"""
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}")
    custom_fields = [
        {
            "field_id": 1387641,
            "values": [{"value": purchase_date}]
        }
    ]

    lead_data = {
        "name": name,
        "price": budget,
        "_embedded": {
            "contacts": [{"id": contact_id, "is_main": True}]
        },
        "custom_fields_values": custom_fields
    }

    try:
        response = requests.post(
            f'{AMOCRM_BASE_URL}/leads',
            headers=amocrm_headers,
            json=[lead_data]
        )
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {str(e)}")
        return False

def get_posiflora_token():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Posiflora"""
    print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Posiflora...")
    try:
        response = requests.post(
            f'{POSIFLORA_API_URL}/sessions',
            json={"data": {"type": "sessions", "attributes": POSIFLORA_CREDENTIALS}}
        )
        return response.json()['data']['attributes']['accessToken']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

def get_customer_bonus(customer_id, headers):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤"""
    if not customer_id:
        return None
    try:
        response = requests.get(
            f'{POSIFLORA_API_URL}/customers/{customer_id}',
            headers=headers
        )
        return response.json()['data']['attributes'].get('currentPoints')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤: {str(e)}")
        return None

def get_done_orders_count(headers):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = "https://cvetoot.posiflora.com/api/v1/orders?page[number]=1&page[size]=1&filter[statuses]=done"
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ 'meta'
        if 'meta' not in data:
            print("‚ùå –í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'meta'")
            return None
        
        return data['meta']['total']
    except requests.exceptions.RequestException as e:
        print(f"üö® –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None
    except KeyError as e:
        print(f"üîë –û—à–∏–±–∫–∞ –∫–ª—é—á–∞ –≤ JSON: {str(e)}")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

def get_order_data(page_number, headers):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
    url = f"https://cvetoot.posiflora.com/api/v1/orders?page%5Bnumber%5D={page_number}&page%5Bsize%5D=1&filter%5Bstatuses%5D=done&include=source%2Cstore%2Cstore.timezone%2Ccustomer%2CpostedBy%2CcreatedBy%2ClockedBy%2Cpayments%2Cpayments.method%2Cdiscounts%2Ccourier%2Cflorist&sort=createdAt"
    try:
        response = requests.get(url, headers=headers)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}")
        return None

def format_phone(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX"""
    # –û—á–∏—â–∞–µ–º –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    cleaned = ''.join(filter(str.isdigit, str(phone)))
    
    if cleaned.startswith('8') and len(cleaned) == 11:
        # –ù–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX -> +7XXXXXXXXX
        return '+7' + cleaned[1:]
    elif len(cleaned) == 10:
        # –ù–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXXXXXXX -> +7XXXXXXXXXX
        return '+7' + cleaned
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º +7
        return f'+7{cleaned[-10:]}'

def process_order(order_data, headers):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        customer_relation = order_data['data'][0]['relationships']['customer']
        customer_id = customer_relation['data']['id']
        order_attrs = order_data['data'][0]['attributes']
        
        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ
        customer_data = next(
            (item for item in order_data['included'] if item['type'] == 'customers'),
            None
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = customer_data['attributes']['phone'] if customer_data else "–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        phone = format_phone(phone) if phone != "–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" else phone
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
        bonus_points = get_customer_bonus(customer_id, headers)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_id = create_contact(
            name=customer_data['attributes']['title'] if customer_data else "–ë–µ–∑ –∏–º–µ–Ω–∏",
            phone=phone,
            bonus_points=bonus_points
        )
        
        if contact_id:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            return create_lead(
                name=f"–ó–∞–∫–∞–∑ {order_attrs['docNo']}",
                budget=order_attrs['totalAmount'],
                contact_id=contact_id,
                purchase_date=order_attrs['date']
            )
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Posiflora
    posiflora_token = get_posiflora_token()
    if not posiflora_token:
        return

    headers = {
        "Authorization": f"Bearer {posiflora_token}",
        "Content-Type": "application/json"
    }

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
    done_orders_count = get_done_orders_count(headers)
    if not done_orders_count:
        print("–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        return

    print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {done_orders_count}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    for i in range(1, done_orders_count + 1):
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ {i} –∏–∑ {done_orders_count}...")
        order_data = get_order_data(i, headers)
        if order_data:
            process_order(order_data, headers)

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    print("\n–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
    last_count = done_orders_count
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        if not posiflora_token:
            posiflora_token = get_posiflora_token()
            if not posiflora_token:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                time.sleep(60)
                continue
            headers["Authorization"] = f"Bearer {posiflora_token}"

        current_count = get_done_orders_count(headers)
        if current_count is None:
            print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
            continue

        if current_count > last_count:
            print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {current_count - last_count}")
            
            for i in range(last_count + 1, current_count + 1):
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ {i}...")
                order_data = get_order_data(i, headers)
                if order_data:
                    process_order(order_data, headers)
            
            last_count = current_count
        
        time.sleep(60)

if __name__ == "__main__":
    main()